// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "Conseil API",
    "version": "0.0.1"
  },
  "paths": {
    "/v2/data/{platform}/{network}/accounts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "after_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccount",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account",
            "schema": {
              "$ref": "#/definitions/AccountsRow"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}/delegators": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountDelegators",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for account delegators",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/bakers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getBakersList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query Endpoint for getting list of baker accounts ordered by staking balance.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakersRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlocksList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "before_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for blocks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlocksRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/head": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlocksHead",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for blocks head",
            "schema": {
              "$ref": "#/definitions/BlocksRow"
            }
          },
          "500": {
            "description": "Not initialized"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/{hash}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlock",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for block by hash",
            "schema": {
              "$ref": "#/definitions/BlockResult"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/{hash}/endorsements": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlockEndorsements",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for endorsements of a block by hash or level",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "$ref": "#/definitions/Info"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operation_groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Operation groups"
        ],
        "operationId": "getOperationGroups",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operation groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operation_groups/{operationGroupId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Operation groups"
        ],
        "operationId": "getOperationGroup",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "operationGroupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operation group",
            "schema": {
              "$ref": "#/definitions/OperationGroupResult"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "OperationsList"
        ],
        "operationId": "getOperationsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "before_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Operation hash",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "endorsement",
                "proposals",
                "seed_nonce_revelation",
                "delegation",
                "transaction",
                "activate_account",
                "ballot",
                "origination",
                "reveal",
                "double_baking_evidence"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operations/avgFees": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Fees"
        ],
        "operationId": "getAvgFees",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for average fees",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/{entity}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "Query"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DataTypes.ApiQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Can't query - invalid entity!"
          },
          "400": {
            "description": "Can't query - invalid entity!",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/v2/metadata/platforms": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available platforms",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlatformDiscoveryTypes.Platform"
              }
            }
          }
        }
      }
    },
    "/v2/metadata/{platform}/networks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available networks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlatformDiscoveryTypes.Network"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/v2/metadata/{platform}/{network}/entities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlatformDiscoveryTypes.Entity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/v2/metadata/{platform}/{network}/{entity}/attributes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "entity",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available attributes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlatformDiscoveryTypes.Attribute"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/v2/metadata/{platform}/{network}/{entity}/{attribute}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "attribute",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available distinct values for given attribute",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Cannot get the attributes!",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/v2/metadata/{platform}/{network}/{entity}/{attribute}/{filter}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "attribute",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "filter",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available distinct values for given attribute filtered",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Cannot get the attributes!",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    }
  },
  "definitions": {
    "AccountResult": {
      "type": "object",
      "required": [
        "account"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountsRow"
        }
      }
    },
    "AccountsRow": {
      "type": "object",
      "required": [
        "balance",
        "accountId",
        "delegateSetable",
        "spendable",
        "manager",
        "counter",
        "blockLevel",
        "blockId"
      ],
      "properties": {
        "accountId": {
          "type": "string"
        },
        "bakerInfo": {
          "$ref": "#/definitions/BakerInfo"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "blockId": {
          "type": "string"
        },
        "blockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "counter": {
          "type": "integer",
          "format": "int64"
        },
        "delegateSetable": {
          "type": "boolean"
        },
        "delegateValue": {
          "type": "string"
        },
        "manager": {
          "type": "string"
        },
        "script": {
          "type": "string"
        },
        "spendable": {
          "type": "boolean"
        },
        "storage": {
          "type": "string"
        }
      }
    },
    "BakerInfo": {
      "type": "object",
      "properties": {
        "bakingDeposits": {
          "type": "integer",
          "format": "int64"
        },
        "bakingRewards": {
          "type": "integer",
          "format": "int64"
        },
        "endorsementDeposits": {
          "type": "integer",
          "format": "int64"
        },
        "endorsementRewards": {
          "type": "integer",
          "format": "int64"
        },
        "evaluatedBalance": {
          "type": "integer",
          "format": "int64"
        },
        "stakingBalance": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BakersRow": {
      "type": "object",
      "required": [
        "stakingBalance",
        "accountId",
        "blocks",
        "endorsements",
        "fees"
      ],
      "properties": {
        "accountId": {
          "type": "string"
        },
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "endorsements": {
          "type": "integer",
          "format": "int64"
        },
        "fees": {
          "type": "integer",
          "format": "int64"
        },
        "stakingBalance": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BlockResult": {
      "type": "object",
      "required": [
        "block",
        "operation_groups"
      ],
      "properties": {
        "block": {
          "$ref": "#/definitions/BlocksRow"
        },
        "operation_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationGroupsRow"
          }
        }
      }
    },
    "BlocksRow": {
      "type": "object",
      "required": [
        "timestamp",
        "proto",
        "validationPass",
        "hash",
        "fitness",
        "protocol",
        "predecessor",
        "level"
      ],
      "properties": {
        "activate_accounts": {
          "type": "integer",
          "format": "int64"
        },
        "activeProposal": {
          "type": "string"
        },
        "baker": {
          "type": "string"
        },
        "ballots": {
          "type": "integer",
          "format": "int64"
        },
        "chainId": {
          "type": "string"
        },
        "consumedGas": {
          "type": "integer",
          "format": "int64"
        },
        "context": {
          "type": "string"
        },
        "currentExpectedQuorum": {
          "type": "integer",
          "format": "int64"
        },
        "delegations": {
          "type": "integer",
          "format": "int64"
        },
        "double_baking_evidence": {
          "type": "integer",
          "format": "int64"
        },
        "endorsements": {
          "type": "integer",
          "format": "int64"
        },
        "expectedCommitment": {
          "type": "boolean"
        },
        "fees": {
          "type": "integer",
          "format": "int64"
        },
        "fitness": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "metaCycle": {
          "type": "integer",
          "format": "int64"
        },
        "metaCyclePosition": {
          "type": "integer",
          "format": "int64"
        },
        "metaLevel": {
          "type": "integer",
          "format": "int64"
        },
        "metaLevelPosition": {
          "type": "integer",
          "format": "int64"
        },
        "metaVotingPeriod": {
          "type": "integer",
          "format": "int64"
        },
        "metaVotingPeriodPosition": {
          "type": "integer",
          "format": "int64"
        },
        "nonceHash": {
          "type": "string"
        },
        "operationsHash": {
          "type": "string"
        },
        "originations": {
          "type": "integer",
          "format": "int64"
        },
        "periodKind": {
          "type": "string"
        },
        "predecessor": {
          "type": "string"
        },
        "proposals": {
          "type": "integer",
          "format": "int64"
        },
        "proto": {
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "type": "string"
        },
        "reveals": {
          "type": "integer",
          "format": "int64"
        },
        "seed_nonce_revelations": {
          "type": "integer",
          "format": "int64"
        },
        "signature": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "transactions": {
          "type": "integer",
          "format": "int64"
        },
        "validationPass": {
          "type": "integer",
          "format": "int64"
        },
        "volume": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DataTypes.ApiAggregation": {
      "type": "object",
      "required": [
        "field",
        "function"
      ],
      "properties": {
        "field": {
          "type": "string"
        },
        "function": {
          "type": "string",
          "enum": [
            "sum",
            "count",
            "max",
            "min",
            "avg"
          ]
        },
        "predicate": {
          "$ref": "#/definitions/DataTypes.ApiAggregationPredicate"
        }
      }
    },
    "DataTypes.ApiAggregationPredicate": {
      "type": "object",
      "required": [
        "operation"
      ],
      "properties": {
        "inverse": {
          "type": "boolean"
        },
        "operation": {
          "type": "string",
          "enum": [
            "in",
            "between",
            "like",
            "lt",
            "gt",
            "eq",
            "startsWith",
            "endsWith",
            "before",
            "after",
            "isnull"
          ]
        },
        "precision": {
          "type": "integer",
          "format": "int64"
        },
        "set": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DataTypes.ApiPredicate": {
      "type": "object",
      "required": [
        "field",
        "operation"
      ],
      "properties": {
        "field": {
          "type": "string"
        },
        "inverse": {
          "type": "boolean"
        },
        "operation": {
          "type": "string",
          "enum": [
            "in",
            "between",
            "like",
            "lt",
            "gt",
            "eq",
            "startsWith",
            "endsWith",
            "before",
            "after",
            "isnull"
          ]
        },
        "precision": {
          "type": "integer",
          "format": "int64"
        },
        "set": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DataTypes.ApiQuery": {
      "type": "object",
      "properties": {
        "aggregation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTypes.ApiAggregation"
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "default": 20,
          "maximum": 500,
          "minimum": 1
        },
        "orderBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTypes.QueryOrdering"
          }
        },
        "output": {
          "type": "string",
          "enum": [
            "json",
            "csv",
            "sql"
          ]
        },
        "predicates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTypes.ApiPredicate"
          }
        }
      }
    },
    "DataTypes.QueryOrdering": {
      "type": "object",
      "required": [
        "field",
        "direction"
      ],
      "properties": {
        "direction": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        },
        "field": {
          "type": "string"
        }
      }
    },
    "Info": {
      "type": "object",
      "required": [
        "price",
        "price_24h_change"
      ],
      "properties": {
        "annual_yield": {
          "description": "Expected annual return in percents.",
          "type": "number"
        },
        "price": {
          "type": "number"
        },
        "price_24h_change": {
          "type": "number"
        },
        "staking_ratio": {
          "description": "Staking ratio in percents (0-100).",
          "type": "number",
          "maximum": 100
        }
      }
    },
    "OperationGroupResult": {
      "type": "object",
      "required": [
        "operation_group",
        "operations"
      ],
      "properties": {
        "operation_group": {
          "$ref": "#/definitions/OperationGroupsRow"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationsRow"
          }
        }
      }
    },
    "OperationGroupsRow": {
      "type": "object",
      "required": [
        "protocol",
        "hash",
        "branch",
        "blockId"
      ],
      "properties": {
        "blockId": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "chainId": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "OperationsRow": {
      "type": "object",
      "required": [
        "blockHash",
        "timestamp",
        "operationId",
        "operationGroupHash",
        "kind",
        "blockLevel"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "blockHash": {
          "type": "string"
        },
        "blockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "consumedGas": {
          "type": "integer",
          "format": "int64"
        },
        "counter": {
          "type": "integer",
          "format": "int64"
        },
        "delegatable": {
          "type": "boolean"
        },
        "delegate": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "fee": {
          "type": "integer",
          "format": "int64"
        },
        "gasLimit": {
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "managerPubkey": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "operationGroupHash": {
          "type": "string"
        },
        "operationId": {
          "type": "integer",
          "format": "int64"
        },
        "originatedContracts": {
          "type": "string"
        },
        "paidStorageSizeDiff": {
          "type": "integer",
          "format": "int64"
        },
        "parameters": {
          "type": "string"
        },
        "pkh": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "script": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "slots": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "spendable": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "storage": {
          "type": "string"
        },
        "storageLimit": {
          "type": "integer",
          "format": "int64"
        },
        "storageSize": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PlatformDiscoveryTypes.Attribute": {
      "type": "object",
      "required": [
        "displayName",
        "keyType",
        "name",
        "entity",
        "dataType"
      ],
      "properties": {
        "cardinality": {
          "type": "integer",
          "format": "int64"
        },
        "currencySymbol": {
          "type": "string"
        },
        "currencySymbolCode": {
          "type": "integer",
          "format": "int64"
        },
        "dataFormat": {
          "type": "string"
        },
        "dataType": {
          "type": "string",
          "enum": [
            "Enum",
            "Hex",
            "Binary",
            "Date",
            "DateTime",
            "String",
            "Hash",
            "AccountAddress",
            "Int",
            "LargeInt",
            "Decimal",
            "Currency",
            "Boolean"
          ]
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "displayOrder": {
          "type": "integer",
          "format": "int64"
        },
        "displayPriority": {
          "type": "integer",
          "format": "int64"
        },
        "entity": {
          "type": "string"
        },
        "keyType": {
          "type": "string",
          "enum": [
            "NonKey",
            "UniqueKey"
          ]
        },
        "name": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "reference": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scale": {
          "type": "integer",
          "format": "int64"
        },
        "sufficientForQuery": {
          "type": "boolean"
        },
        "valueMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PlatformDiscoveryTypes.Entity": {
      "type": "object",
      "required": [
        "name",
        "displayName",
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "displayNamePlural": {
          "type": "string"
        },
        "limitedQuery": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PlatformDiscoveryTypes.Network": {
      "type": "object",
      "required": [
        "name",
        "displayName",
        "platform",
        "network"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        }
      }
    },
    "PlatformDiscoveryTypes.Platform": {
      "type": "object",
      "required": [
        "name",
        "displayName"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "Conseil API",
    "version": "0.0.1"
  },
  "paths": {
    "/v2/data/{platform}/{network}/accounts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "name": "after_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for accounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccount",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for account",
            "schema": {
              "$ref": "#/definitions/AccountsRow"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/accounts/{accountId}/delegators": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getAccountDelegators",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "accountId",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for account delegators",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/bakers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Accounts"
        ],
        "operationId": "getBakersList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query Endpoint for getting list of baker accounts ordered by staking balance.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BakersRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlocksList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "before_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for blocks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlocksRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/head": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlocksHead",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for blocks head",
            "schema": {
              "$ref": "#/definitions/BlocksRow"
            }
          },
          "500": {
            "description": "Not initialized"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/{hash}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlock",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for block by hash",
            "schema": {
              "$ref": "#/definitions/BlockResult"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/blocks/{hash}/endorsements": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "operationId": "getBlockEndorsements",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint for endorsements of a block by hash or level",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "App Info"
        ],
        "operationId": "getInfo",
        "parameters": [
          {
            "enum": [
              "tezos"
            ],
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "mainnet"
            ],
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Application info endpoint",
            "schema": {
              "$ref": "#/definitions/Info"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operation_groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Operation groups"
        ],
        "operationId": "getOperationGroups",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operation groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operation_groups/{operationGroupId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Operation groups"
        ],
        "operationId": "getOperationGroup",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "operationGroupId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operation group",
            "schema": {
              "$ref": "#/definitions/OperationGroupResult"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "OperationsList"
        ],
        "operationId": "getOperationsList",
        "parameters": [
          {
            "type": "string",
            "description": "Not used",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "before_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Operation hash",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "endorsement",
                "proposals",
                "seed_nonce_revelation",
                "delegation",
                "transaction",
                "activate_account",
                "ballot",
                "origination",
                "reveal",
                "double_baking_evidence"
              ],
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Not used",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Not used",
            "name": "sort_by",
            "in": "query"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "description": "Not used",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for operations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationsRow"
              }
            },
            "headers": {
              "X-Total-Count": {
                "type": "integer",
                "description": "The total number of data entries."
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/operations/avgFees": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Fees"
        ],
        "operationId": "getAvgFees",
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Offset",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "block_level",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_netid",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "block_protocol",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_source",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_destination",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_participant",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "operation_kind",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_manager",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "account_delegate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "string",
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query compatibility endpoint for average fees",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/v2/data/{platform}/{network}/{entity}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/csv",
          "text/plain"
        ],
        "tags": [
          "Query"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DataTypes.ApiQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Can't query - invalid entity!"
          },
          "400": {
            "description": "Can't query - invalid entity!",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/v2/metadata/platforms": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available platforms",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlatformDiscoveryTypes.Platform"
              }
            }
          }
        }
      }
    },
    "/v2/metadata/{platform}/networks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available networks",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlatformDiscoveryTypes.Network"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/v2/metadata/{platform}/{network}/entities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlatformDiscoveryTypes.Entity"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/v2/metadata/{platform}/{network}/{entity}/attributes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "entity",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available attributes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PlatformDiscoveryTypes.Attribute"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/v2/metadata/{platform}/{network}/{entity}/{attribute}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "attribute",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available distinct values for given attribute",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Cannot get the attributes!",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/v2/metadata/{platform}/{network}/{entity}/{attribute}/{filter}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Metadata"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "platform",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "attribute",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "filter",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata endpoint for listing available distinct values for given attribute filtered",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Cannot get the attributes!",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    }
  },
  "definitions": {
    "AccountResult": {
      "type": "object",
      "required": [
        "account"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/AccountsRow"
        }
      }
    },
    "AccountsRow": {
      "type": "object",
      "required": [
        "balance",
        "accountId",
        "delegateSetable",
        "spendable",
        "manager",
        "counter",
        "blockLevel",
        "blockId"
      ],
      "properties": {
        "accountId": {
          "type": "string"
        },
        "bakerInfo": {
          "$ref": "#/definitions/BakerInfo"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "blockId": {
          "type": "string"
        },
        "blockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "counter": {
          "type": "integer",
          "format": "int64"
        },
        "delegateSetable": {
          "type": "boolean"
        },
        "delegateValue": {
          "type": "string"
        },
        "manager": {
          "type": "string"
        },
        "script": {
          "type": "string"
        },
        "spendable": {
          "type": "boolean"
        },
        "storage": {
          "type": "string"
        }
      }
    },
    "BakerInfo": {
      "type": "object",
      "properties": {
        "bakingDeposits": {
          "type": "integer",
          "format": "int64"
        },
        "bakingRewards": {
          "type": "integer",
          "format": "int64"
        },
        "endorsementDeposits": {
          "type": "integer",
          "format": "int64"
        },
        "endorsementRewards": {
          "type": "integer",
          "format": "int64"
        },
        "evaluatedBalance": {
          "type": "integer",
          "format": "int64"
        },
        "stakingBalance": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BakersRow": {
      "type": "object",
      "required": [
        "stakingBalance",
        "accountId",
        "blocks",
        "endorsements",
        "fees"
      ],
      "properties": {
        "accountId": {
          "type": "string"
        },
        "blocks": {
          "type": "integer",
          "format": "int64"
        },
        "endorsements": {
          "type": "integer",
          "format": "int64"
        },
        "fees": {
          "type": "integer",
          "format": "int64"
        },
        "stakingBalance": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BlockResult": {
      "type": "object",
      "required": [
        "block",
        "operation_groups"
      ],
      "properties": {
        "block": {
          "$ref": "#/definitions/BlocksRow"
        },
        "operation_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationGroupsRow"
          }
        }
      }
    },
    "BlocksRow": {
      "type": "object",
      "required": [
        "timestamp",
        "proto",
        "validationPass",
        "hash",
        "fitness",
        "protocol",
        "predecessor",
        "level"
      ],
      "properties": {
        "activate_accounts": {
          "type": "integer",
          "format": "int64"
        },
        "activeProposal": {
          "type": "string"
        },
        "baker": {
          "type": "string"
        },
        "ballots": {
          "type": "integer",
          "format": "int64"
        },
        "chainId": {
          "type": "string"
        },
        "consumedGas": {
          "type": "integer",
          "format": "int64"
        },
        "context": {
          "type": "string"
        },
        "currentExpectedQuorum": {
          "type": "integer",
          "format": "int64"
        },
        "delegations": {
          "type": "integer",
          "format": "int64"
        },
        "double_baking_evidence": {
          "type": "integer",
          "format": "int64"
        },
        "endorsements": {
          "type": "integer",
          "format": "int64"
        },
        "expectedCommitment": {
          "type": "boolean"
        },
        "fees": {
          "type": "integer",
          "format": "int64"
        },
        "fitness": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "metaCycle": {
          "type": "integer",
          "format": "int64"
        },
        "metaCyclePosition": {
          "type": "integer",
          "format": "int64"
        },
        "metaLevel": {
          "type": "integer",
          "format": "int64"
        },
        "metaLevelPosition": {
          "type": "integer",
          "format": "int64"
        },
        "metaVotingPeriod": {
          "type": "integer",
          "format": "int64"
        },
        "metaVotingPeriodPosition": {
          "type": "integer",
          "format": "int64"
        },
        "nonceHash": {
          "type": "string"
        },
        "operationsHash": {
          "type": "string"
        },
        "originations": {
          "type": "integer",
          "format": "int64"
        },
        "periodKind": {
          "type": "string"
        },
        "predecessor": {
          "type": "string"
        },
        "proposals": {
          "type": "integer",
          "format": "int64"
        },
        "proto": {
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "type": "string"
        },
        "reveals": {
          "type": "integer",
          "format": "int64"
        },
        "seed_nonce_revelations": {
          "type": "integer",
          "format": "int64"
        },
        "signature": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "transactions": {
          "type": "integer",
          "format": "int64"
        },
        "validationPass": {
          "type": "integer",
          "format": "int64"
        },
        "volume": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DataTypes.ApiAggregation": {
      "type": "object",
      "required": [
        "field",
        "function"
      ],
      "properties": {
        "field": {
          "type": "string"
        },
        "function": {
          "type": "string",
          "enum": [
            "sum",
            "count",
            "max",
            "min",
            "avg"
          ]
        },
        "predicate": {
          "$ref": "#/definitions/DataTypes.ApiAggregationPredicate"
        }
      }
    },
    "DataTypes.ApiAggregationPredicate": {
      "type": "object",
      "required": [
        "operation"
      ],
      "properties": {
        "inverse": {
          "type": "boolean"
        },
        "operation": {
          "type": "string",
          "enum": [
            "in",
            "between",
            "like",
            "lt",
            "gt",
            "eq",
            "startsWith",
            "endsWith",
            "before",
            "after",
            "isnull"
          ]
        },
        "precision": {
          "type": "integer",
          "format": "int64"
        },
        "set": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DataTypes.ApiPredicate": {
      "type": "object",
      "required": [
        "field",
        "operation"
      ],
      "properties": {
        "field": {
          "type": "string"
        },
        "inverse": {
          "type": "boolean"
        },
        "operation": {
          "type": "string",
          "enum": [
            "in",
            "between",
            "like",
            "lt",
            "gt",
            "eq",
            "startsWith",
            "endsWith",
            "before",
            "after",
            "isnull"
          ]
        },
        "precision": {
          "type": "integer",
          "format": "int64"
        },
        "set": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DataTypes.ApiQuery": {
      "type": "object",
      "properties": {
        "aggregation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTypes.ApiAggregation"
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "default": 20,
          "maximum": 500,
          "minimum": 1
        },
        "orderBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTypes.QueryOrdering"
          }
        },
        "output": {
          "type": "string",
          "enum": [
            "json",
            "csv",
            "sql"
          ]
        },
        "predicates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTypes.ApiPredicate"
          }
        }
      }
    },
    "DataTypes.QueryOrdering": {
      "type": "object",
      "required": [
        "field",
        "direction"
      ],
      "properties": {
        "direction": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        },
        "field": {
          "type": "string"
        }
      }
    },
    "Info": {
      "type": "object",
      "required": [
        "price",
        "price_24h_change"
      ],
      "properties": {
        "annual_yield": {
          "description": "Expected annual return in percents.",
          "type": "number"
        },
        "price": {
          "type": "number"
        },
        "price_24h_change": {
          "type": "number"
        },
        "staking_ratio": {
          "description": "Staking ratio in percents (0-100).",
          "type": "number",
          "maximum": 100,
          "minimum": 0
        }
      }
    },
    "OperationGroupResult": {
      "type": "object",
      "required": [
        "operation_group",
        "operations"
      ],
      "properties": {
        "operation_group": {
          "$ref": "#/definitions/OperationGroupsRow"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationsRow"
          }
        }
      }
    },
    "OperationGroupsRow": {
      "type": "object",
      "required": [
        "protocol",
        "hash",
        "branch",
        "blockId"
      ],
      "properties": {
        "blockId": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "chainId": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        }
      }
    },
    "OperationsRow": {
      "type": "object",
      "required": [
        "blockHash",
        "timestamp",
        "operationId",
        "operationGroupHash",
        "kind",
        "blockLevel"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "balance": {
          "type": "integer",
          "format": "int64"
        },
        "blockHash": {
          "type": "string"
        },
        "blockLevel": {
          "type": "integer",
          "format": "int64"
        },
        "consumedGas": {
          "type": "integer",
          "format": "int64"
        },
        "counter": {
          "type": "integer",
          "format": "int64"
        },
        "delegatable": {
          "type": "boolean"
        },
        "delegate": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "fee": {
          "type": "integer",
          "format": "int64"
        },
        "gasLimit": {
          "type": "integer",
          "format": "int64"
        },
        "kind": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "managerPubkey": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "operationGroupHash": {
          "type": "string"
        },
        "operationId": {
          "type": "integer",
          "format": "int64"
        },
        "originatedContracts": {
          "type": "string"
        },
        "paidStorageSizeDiff": {
          "type": "integer",
          "format": "int64"
        },
        "parameters": {
          "type": "string"
        },
        "pkh": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "script": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "slots": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "spendable": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "storage": {
          "type": "string"
        },
        "storageLimit": {
          "type": "integer",
          "format": "int64"
        },
        "storageSize": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PlatformDiscoveryTypes.Attribute": {
      "type": "object",
      "required": [
        "displayName",
        "keyType",
        "name",
        "entity",
        "dataType"
      ],
      "properties": {
        "cardinality": {
          "type": "integer",
          "format": "int64"
        },
        "currencySymbol": {
          "type": "string"
        },
        "currencySymbolCode": {
          "type": "integer",
          "format": "int64"
        },
        "dataFormat": {
          "type": "string"
        },
        "dataType": {
          "type": "string",
          "enum": [
            "Enum",
            "Hex",
            "Binary",
            "Date",
            "DateTime",
            "String",
            "Hash",
            "AccountAddress",
            "Int",
            "LargeInt",
            "Decimal",
            "Currency",
            "Boolean"
          ]
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "displayOrder": {
          "type": "integer",
          "format": "int64"
        },
        "displayPriority": {
          "type": "integer",
          "format": "int64"
        },
        "entity": {
          "type": "string"
        },
        "keyType": {
          "type": "string",
          "enum": [
            "NonKey",
            "UniqueKey"
          ]
        },
        "name": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "reference": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scale": {
          "type": "integer",
          "format": "int64"
        },
        "sufficientForQuery": {
          "type": "boolean"
        },
        "valueMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PlatformDiscoveryTypes.Entity": {
      "type": "object",
      "required": [
        "name",
        "displayName",
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "displayNamePlural": {
          "type": "string"
        },
        "limitedQuery": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PlatformDiscoveryTypes.Network": {
      "type": "object",
      "required": [
        "name",
        "displayName",
        "platform",
        "network"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        }
      }
    },
    "PlatformDiscoveryTypes.Platform": {
      "type": "object",
      "required": [
        "name",
        "displayName"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  }
}`))
}
