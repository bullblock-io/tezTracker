// Code generated by go-swagger; DO NOT EDIT.

package blocks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetBakingRightsParams creates a new GetBakingRightsParams object
// with the default values initialized.
func NewGetBakingRightsParams() GetBakingRightsParams {

	var (
		// initialize parameters with default values

		limitDefault = int64(20)

		offsetDefault = int64(0)

		prioritiesToDefault = int64(10)
	)

	return GetBakingRightsParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,

		PrioritiesTo: &prioritiesToDefault,
	}
}

// GetBakingRightsParams contains all the bound params for the get baking rights operation
// typically these are obtained from a http.Request
//
// swagger:parameters getBakingRights
type GetBakingRightsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	  Collection Format: multi
	*/
	BlockID []string
	/*
	  Maximum: 50
	  Minimum: 1
	  In: query
	  Default: 20
	*/
	Limit *int64
	/*Not used
	  Required: true
	  In: path
	*/
	Network string
	/*Offset
	  Minimum: 0
	  In: query
	  Default: 0
	*/
	Offset *int64
	/*Not used
	  Required: true
	  In: path
	*/
	Platform string
	/*
	  Maximum: 64
	  Minimum: 0
	  In: query
	  Default: 10
	*/
	PrioritiesTo *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetBakingRightsParams() beforehand.
func (o *GetBakingRightsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qBlockID, qhkBlockID, _ := qs.GetOK("block_id")
	if err := o.bindBlockID(qBlockID, qhkBlockID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	rNetwork, rhkNetwork, _ := route.Params.GetOK("network")
	if err := o.bindNetwork(rNetwork, rhkNetwork, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	rPlatform, rhkPlatform, _ := route.Params.GetOK("platform")
	if err := o.bindPlatform(rPlatform, rhkPlatform, route.Formats); err != nil {
		res = append(res, err)
	}

	qPrioritiesTo, qhkPrioritiesTo, _ := qs.GetOK("priorities_to")
	if err := o.bindPrioritiesTo(qPrioritiesTo, qhkPrioritiesTo, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBlockID binds and validates array parameter BlockID from query.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *GetBakingRightsParams) bindBlockID(rawData []string, hasKey bool, formats strfmt.Registry) error {

	// CollectionFormat: multi
	blockIDIC := rawData

	if len(blockIDIC) == 0 {
		return nil
	}

	var blockIDIR []string
	for _, blockIDIV := range blockIDIC {
		blockIDI := blockIDIV

		blockIDIR = append(blockIDIR, blockIDI)
	}

	o.BlockID = blockIDIR

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetBakingRightsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetBakingRightsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetBakingRightsParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", int64(*o.Limit), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "query", int64(*o.Limit), 50, false); err != nil {
		return err
	}

	return nil
}

// bindNetwork binds and validates parameter Network from path.
func (o *GetBakingRightsParams) bindNetwork(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Network = raw

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetBakingRightsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetBakingRightsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	if err := o.validateOffset(formats); err != nil {
		return err
	}

	return nil
}

// validateOffset carries on validations for parameter Offset
func (o *GetBakingRightsParams) validateOffset(formats strfmt.Registry) error {

	if err := validate.MinimumInt("offset", "query", int64(*o.Offset), 0, false); err != nil {
		return err
	}

	return nil
}

// bindPlatform binds and validates parameter Platform from path.
func (o *GetBakingRightsParams) bindPlatform(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Platform = raw

	return nil
}

// bindPrioritiesTo binds and validates parameter PrioritiesTo from query.
func (o *GetBakingRightsParams) bindPrioritiesTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetBakingRightsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("priorities_to", "query", "int64", raw)
	}
	o.PrioritiesTo = &value

	if err := o.validatePrioritiesTo(formats); err != nil {
		return err
	}

	return nil
}

// validatePrioritiesTo carries on validations for parameter PrioritiesTo
func (o *GetBakingRightsParams) validatePrioritiesTo(formats strfmt.Registry) error {

	if err := validate.MinimumInt("priorities_to", "query", int64(*o.PrioritiesTo), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("priorities_to", "query", int64(*o.PrioritiesTo), 64, false); err != nil {
		return err
	}

	return nil
}
