// Code generated by go-swagger; DO NOT EDIT.

package blocks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetBlockBakingRightsHandlerFunc turns a function with the right signature into a get block baking rights handler
type GetBlockBakingRightsHandlerFunc func(GetBlockBakingRightsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBlockBakingRightsHandlerFunc) Handle(params GetBlockBakingRightsParams) middleware.Responder {
	return fn(params)
}

// GetBlockBakingRightsHandler interface for that can handle valid get block baking rights params
type GetBlockBakingRightsHandler interface {
	Handle(GetBlockBakingRightsParams) middleware.Responder
}

// NewGetBlockBakingRights creates a new http.Handler for the get block baking rights operation
func NewGetBlockBakingRights(ctx *middleware.Context, handler GetBlockBakingRightsHandler) *GetBlockBakingRights {
	return &GetBlockBakingRights{Context: ctx, Handler: handler}
}

/*GetBlockBakingRights swagger:route GET /v2/data/{platform}/{network}/blocks/{hash}/baking_rights Blocks getBlockBakingRights

GetBlockBakingRights get block baking rights API

*/
type GetBlockBakingRights struct {
	Context *middleware.Context
	Handler GetBlockBakingRightsHandler
}

func (o *GetBlockBakingRights) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBlockBakingRightsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
