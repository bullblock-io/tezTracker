// Code generated by go-swagger; DO NOT EDIT.

package operation_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetOperationGroupHandlerFunc turns a function with the right signature into a get operation group handler
type GetOperationGroupHandlerFunc func(GetOperationGroupParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOperationGroupHandlerFunc) Handle(params GetOperationGroupParams) middleware.Responder {
	return fn(params)
}

// GetOperationGroupHandler interface for that can handle valid get operation group params
type GetOperationGroupHandler interface {
	Handle(GetOperationGroupParams) middleware.Responder
}

// NewGetOperationGroup creates a new http.Handler for the get operation group operation
func NewGetOperationGroup(ctx *middleware.Context, handler GetOperationGroupHandler) *GetOperationGroup {
	return &GetOperationGroup{Context: ctx, Handler: handler}
}

/*GetOperationGroup swagger:route GET /v2/data/{platform}/{network}/operation_groups/{operationGroupId} Operation groups getOperationGroup

GetOperationGroup get operation group API

*/
type GetOperationGroup struct {
	Context *middleware.Context
	Handler GetOperationGroupHandler
}

func (o *GetOperationGroup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetOperationGroupParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
