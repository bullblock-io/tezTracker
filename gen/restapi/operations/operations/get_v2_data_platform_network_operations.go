// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetV2DataPlatformNetworkOperationsHandlerFunc turns a function with the right signature into a get v2 data platform network operations handler
type GetV2DataPlatformNetworkOperationsHandlerFunc func(GetV2DataPlatformNetworkOperationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV2DataPlatformNetworkOperationsHandlerFunc) Handle(params GetV2DataPlatformNetworkOperationsParams) middleware.Responder {
	return fn(params)
}

// GetV2DataPlatformNetworkOperationsHandler interface for that can handle valid get v2 data platform network operations params
type GetV2DataPlatformNetworkOperationsHandler interface {
	Handle(GetV2DataPlatformNetworkOperationsParams) middleware.Responder
}

// NewGetV2DataPlatformNetworkOperations creates a new http.Handler for the get v2 data platform network operations operation
func NewGetV2DataPlatformNetworkOperations(ctx *middleware.Context, handler GetV2DataPlatformNetworkOperationsHandler) *GetV2DataPlatformNetworkOperations {
	return &GetV2DataPlatformNetworkOperations{Context: ctx, Handler: handler}
}

/*GetV2DataPlatformNetworkOperations swagger:route GET /v2/data/{platform}/{network}/operations Operations getV2DataPlatformNetworkOperations

GetV2DataPlatformNetworkOperations get v2 data platform network operations API

*/
type GetV2DataPlatformNetworkOperations struct {
	Context *middleware.Context
	Handler GetV2DataPlatformNetworkOperationsHandler
}

func (o *GetV2DataPlatformNetworkOperations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV2DataPlatformNetworkOperationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
