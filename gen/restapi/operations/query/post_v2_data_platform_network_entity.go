// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostV2DataPlatformNetworkEntityHandlerFunc turns a function with the right signature into a post v2 data platform network entity handler
type PostV2DataPlatformNetworkEntityHandlerFunc func(PostV2DataPlatformNetworkEntityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV2DataPlatformNetworkEntityHandlerFunc) Handle(params PostV2DataPlatformNetworkEntityParams) middleware.Responder {
	return fn(params)
}

// PostV2DataPlatformNetworkEntityHandler interface for that can handle valid post v2 data platform network entity params
type PostV2DataPlatformNetworkEntityHandler interface {
	Handle(PostV2DataPlatformNetworkEntityParams) middleware.Responder
}

// NewPostV2DataPlatformNetworkEntity creates a new http.Handler for the post v2 data platform network entity operation
func NewPostV2DataPlatformNetworkEntity(ctx *middleware.Context, handler PostV2DataPlatformNetworkEntityHandler) *PostV2DataPlatformNetworkEntity {
	return &PostV2DataPlatformNetworkEntity{Context: ctx, Handler: handler}
}

/*PostV2DataPlatformNetworkEntity swagger:route POST /v2/data/{platform}/{network}/{entity} Query postV2DataPlatformNetworkEntity

PostV2DataPlatformNetworkEntity post v2 data platform network entity API

*/
type PostV2DataPlatformNetworkEntity struct {
	Context *middleware.Context
	Handler PostV2DataPlatformNetworkEntityHandler
}

func (o *PostV2DataPlatformNetworkEntity) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV2DataPlatformNetworkEntityParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
