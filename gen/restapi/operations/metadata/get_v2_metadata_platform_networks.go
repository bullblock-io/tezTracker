// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetV2MetadataPlatformNetworksHandlerFunc turns a function with the right signature into a get v2 metadata platform networks handler
type GetV2MetadataPlatformNetworksHandlerFunc func(GetV2MetadataPlatformNetworksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV2MetadataPlatformNetworksHandlerFunc) Handle(params GetV2MetadataPlatformNetworksParams) middleware.Responder {
	return fn(params)
}

// GetV2MetadataPlatformNetworksHandler interface for that can handle valid get v2 metadata platform networks params
type GetV2MetadataPlatformNetworksHandler interface {
	Handle(GetV2MetadataPlatformNetworksParams) middleware.Responder
}

// NewGetV2MetadataPlatformNetworks creates a new http.Handler for the get v2 metadata platform networks operation
func NewGetV2MetadataPlatformNetworks(ctx *middleware.Context, handler GetV2MetadataPlatformNetworksHandler) *GetV2MetadataPlatformNetworks {
	return &GetV2MetadataPlatformNetworks{Context: ctx, Handler: handler}
}

/*GetV2MetadataPlatformNetworks swagger:route GET /v2/metadata/{platform}/networks Metadata getV2MetadataPlatformNetworks

GetV2MetadataPlatformNetworks get v2 metadata platform networks API

*/
type GetV2MetadataPlatformNetworks struct {
	Context *middleware.Context
	Handler GetV2MetadataPlatformNetworksHandler
}

func (o *GetV2MetadataPlatformNetworks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV2MetadataPlatformNetworksParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
