// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetV2MetadataPlatformsHandlerFunc turns a function with the right signature into a get v2 metadata platforms handler
type GetV2MetadataPlatformsHandlerFunc func(GetV2MetadataPlatformsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV2MetadataPlatformsHandlerFunc) Handle(params GetV2MetadataPlatformsParams) middleware.Responder {
	return fn(params)
}

// GetV2MetadataPlatformsHandler interface for that can handle valid get v2 metadata platforms params
type GetV2MetadataPlatformsHandler interface {
	Handle(GetV2MetadataPlatformsParams) middleware.Responder
}

// NewGetV2MetadataPlatforms creates a new http.Handler for the get v2 metadata platforms operation
func NewGetV2MetadataPlatforms(ctx *middleware.Context, handler GetV2MetadataPlatformsHandler) *GetV2MetadataPlatforms {
	return &GetV2MetadataPlatforms{Context: ctx, Handler: handler}
}

/*GetV2MetadataPlatforms swagger:route GET /v2/metadata/platforms Metadata getV2MetadataPlatforms

GetV2MetadataPlatforms get v2 metadata platforms API

*/
type GetV2MetadataPlatforms struct {
	Context *middleware.Context
	Handler GetV2MetadataPlatformsHandler
}

func (o *GetV2MetadataPlatforms) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV2MetadataPlatformsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
