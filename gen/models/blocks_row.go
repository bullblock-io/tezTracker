// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlocksRow blocks row
// swagger:model BlocksRow
type BlocksRow struct {

	// activate accounts
	ActivateAccounts int64 `json:"activate_accounts,omitempty"`

	// active proposal
	ActiveProposal string `json:"activeProposal,omitempty"`

	// baker
	Baker string `json:"baker,omitempty"`

	// ballots
	Ballots int64 `json:"ballots,omitempty"`

	// chain Id
	ChainID string `json:"chainId,omitempty"`

	// consumed gas
	ConsumedGas int64 `json:"consumedGas,omitempty"`

	// context
	Context string `json:"context,omitempty"`

	// current expected quorum
	CurrentExpectedQuorum int64 `json:"currentExpectedQuorum,omitempty"`

	// delegations
	Delegations int64 `json:"delegations,omitempty"`

	// double baking evidence
	DoubleBakingEvidence int64 `json:"double_baking_evidence,omitempty"`

	// endorsements
	Endorsements int64 `json:"endorsements,omitempty"`

	// expected commitment
	ExpectedCommitment bool `json:"expectedCommitment,omitempty"`

	// fees
	Fees int64 `json:"fees,omitempty"`

	// fitness
	// Required: true
	Fitness *string `json:"fitness"`

	// hash
	// Required: true
	Hash *string `json:"hash"`

	// level
	// Required: true
	Level *int64 `json:"level"`

	// meta cycle
	MetaCycle int64 `json:"metaCycle,omitempty"`

	// meta cycle position
	MetaCyclePosition int64 `json:"metaCyclePosition,omitempty"`

	// meta level
	MetaLevel int64 `json:"metaLevel,omitempty"`

	// meta level position
	MetaLevelPosition int64 `json:"metaLevelPosition,omitempty"`

	// meta voting period
	MetaVotingPeriod int64 `json:"metaVotingPeriod,omitempty"`

	// meta voting period position
	MetaVotingPeriodPosition int64 `json:"metaVotingPeriodPosition,omitempty"`

	// nonce hash
	NonceHash string `json:"nonceHash,omitempty"`

	// operations hash
	OperationsHash string `json:"operationsHash,omitempty"`

	// originations
	Originations int64 `json:"originations,omitempty"`

	// period kind
	PeriodKind string `json:"periodKind,omitempty"`

	// predecessor
	// Required: true
	Predecessor *string `json:"predecessor"`

	// proposals
	Proposals int64 `json:"proposals,omitempty"`

	// proto
	// Required: true
	Proto *int64 `json:"proto"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// reveals
	Reveals int64 `json:"reveals,omitempty"`

	// seed nonce revelations
	SeedNonceRevelations int64 `json:"seed_nonce_revelations,omitempty"`

	// signature
	Signature string `json:"signature,omitempty"`

	// timestamp
	// Required: true
	Timestamp *int64 `json:"timestamp"`

	// transactions
	Transactions int64 `json:"transactions,omitempty"`

	// validation pass
	// Required: true
	ValidationPass *int64 `json:"validationPass"`

	// volume
	Volume int64 `json:"volume,omitempty"`
}

// Validate validates this blocks row
func (m *BlocksRow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFitness(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredecessor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationPass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlocksRow) validateFitness(formats strfmt.Registry) error {

	if err := validate.Required("fitness", "body", m.Fitness); err != nil {
		return err
	}

	return nil
}

func (m *BlocksRow) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("hash", "body", m.Hash); err != nil {
		return err
	}

	return nil
}

func (m *BlocksRow) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *BlocksRow) validatePredecessor(formats strfmt.Registry) error {

	if err := validate.Required("predecessor", "body", m.Predecessor); err != nil {
		return err
	}

	return nil
}

func (m *BlocksRow) validateProto(formats strfmt.Registry) error {

	if err := validate.Required("proto", "body", m.Proto); err != nil {
		return err
	}

	return nil
}

func (m *BlocksRow) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *BlocksRow) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *BlocksRow) validateValidationPass(formats strfmt.Registry) error {

	if err := validate.Required("validationPass", "body", m.ValidationPass); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlocksRow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlocksRow) UnmarshalBinary(b []byte) error {
	var res BlocksRow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
