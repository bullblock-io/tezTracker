// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataTypesAPIAggregation data types Api aggregation
// swagger:model DataTypes.ApiAggregation
type DataTypesAPIAggregation struct {

	// field
	// Required: true
	Field *string `json:"field"`

	// function
	// Required: true
	// Enum: [sum count max min avg]
	Function *string `json:"function"`

	// predicate
	Predicate *DataTypesAPIAggregationPredicate `json:"predicate,omitempty"`
}

// Validate validates this data types Api aggregation
func (m *DataTypesAPIAggregation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredicate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTypesAPIAggregation) validateField(formats strfmt.Registry) error {

	if err := validate.Required("field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

var dataTypesApiAggregationTypeFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sum","count","max","min","avg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataTypesApiAggregationTypeFunctionPropEnum = append(dataTypesApiAggregationTypeFunctionPropEnum, v)
	}
}

const (

	// DataTypesAPIAggregationFunctionSum captures enum value "sum"
	DataTypesAPIAggregationFunctionSum string = "sum"

	// DataTypesAPIAggregationFunctionCount captures enum value "count"
	DataTypesAPIAggregationFunctionCount string = "count"

	// DataTypesAPIAggregationFunctionMax captures enum value "max"
	DataTypesAPIAggregationFunctionMax string = "max"

	// DataTypesAPIAggregationFunctionMin captures enum value "min"
	DataTypesAPIAggregationFunctionMin string = "min"

	// DataTypesAPIAggregationFunctionAvg captures enum value "avg"
	DataTypesAPIAggregationFunctionAvg string = "avg"
)

// prop value enum
func (m *DataTypesAPIAggregation) validateFunctionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataTypesApiAggregationTypeFunctionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataTypesAPIAggregation) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	// value enum
	if err := m.validateFunctionEnum("function", "body", *m.Function); err != nil {
		return err
	}

	return nil
}

func (m *DataTypesAPIAggregation) validatePredicate(formats strfmt.Registry) error {

	if swag.IsZero(m.Predicate) { // not required
		return nil
	}

	if m.Predicate != nil {
		if err := m.Predicate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("predicate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTypesAPIAggregation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTypesAPIAggregation) UnmarshalBinary(b []byte) error {
	var res DataTypesAPIAggregation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
