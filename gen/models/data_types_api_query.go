// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataTypesAPIQuery data types Api query
// swagger:model DataTypes.ApiQuery
type DataTypesAPIQuery struct {

	// aggregation
	Aggregation []*DataTypesAPIAggregation `json:"aggregation"`

	// fields
	Fields []string `json:"fields"`

	// limit
	// Maximum: 500
	// Minimum: 1
	Limit int64 `json:"limit,omitempty"`

	// order by
	OrderBy []*DataTypesQueryOrdering `json:"orderBy"`

	// output
	// Enum: [json csv sql]
	Output string `json:"output,omitempty"`

	// predicates
	Predicates []*DataTypesAPIPredicate `json:"predicates"`
}

// Validate validates this data types Api query
func (m *DataTypesAPIQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredicates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTypesAPIQuery) validateAggregation(formats strfmt.Registry) error {

	if swag.IsZero(m.Aggregation) { // not required
		return nil
	}

	for i := 0; i < len(m.Aggregation); i++ {
		if swag.IsZero(m.Aggregation[i]) { // not required
			continue
		}

		if m.Aggregation[i] != nil {
			if err := m.Aggregation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataTypesAPIQuery) validateLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", int64(m.Limit), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "body", int64(m.Limit), 500, false); err != nil {
		return err
	}

	return nil
}

func (m *DataTypesAPIQuery) validateOrderBy(formats strfmt.Registry) error {

	if swag.IsZero(m.OrderBy) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderBy); i++ {
		if swag.IsZero(m.OrderBy[i]) { // not required
			continue
		}

		if m.OrderBy[i] != nil {
			if err := m.OrderBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var dataTypesApiQueryTypeOutputPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["json","csv","sql"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataTypesApiQueryTypeOutputPropEnum = append(dataTypesApiQueryTypeOutputPropEnum, v)
	}
}

const (

	// DataTypesAPIQueryOutputJSON captures enum value "json"
	DataTypesAPIQueryOutputJSON string = "json"

	// DataTypesAPIQueryOutputCsv captures enum value "csv"
	DataTypesAPIQueryOutputCsv string = "csv"

	// DataTypesAPIQueryOutputSQL captures enum value "sql"
	DataTypesAPIQueryOutputSQL string = "sql"
)

// prop value enum
func (m *DataTypesAPIQuery) validateOutputEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataTypesApiQueryTypeOutputPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataTypesAPIQuery) validateOutput(formats strfmt.Registry) error {

	if swag.IsZero(m.Output) { // not required
		return nil
	}

	// value enum
	if err := m.validateOutputEnum("output", "body", m.Output); err != nil {
		return err
	}

	return nil
}

func (m *DataTypesAPIQuery) validatePredicates(formats strfmt.Registry) error {

	if swag.IsZero(m.Predicates) { // not required
		return nil
	}

	for i := 0; i < len(m.Predicates); i++ {
		if swag.IsZero(m.Predicates[i]) { // not required
			continue
		}

		if m.Predicates[i] != nil {
			if err := m.Predicates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("predicates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTypesAPIQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTypesAPIQuery) UnmarshalBinary(b []byte) error {
	var res DataTypesAPIQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
