// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BakersRow bakers row
// swagger:model BakersRow
type BakersRow struct {

	// account Id
	// Required: true
	AccountID *string `json:"accountId"`

	// blocks
	// Required: true
	Blocks *int64 `json:"blocks"`

	// endorsements
	// Required: true
	Endorsements *int64 `json:"endorsements"`

	// fees
	// Required: true
	Fees *int64 `json:"fees"`

	// staking balance
	// Required: true
	StakingBalance *int64 `json:"stakingBalance"`
}

// Validate validates this bakers row
func (m *BakersRow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndorsements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStakingBalance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BakersRow) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *BakersRow) validateBlocks(formats strfmt.Registry) error {

	if err := validate.Required("blocks", "body", m.Blocks); err != nil {
		return err
	}

	return nil
}

func (m *BakersRow) validateEndorsements(formats strfmt.Registry) error {

	if err := validate.Required("endorsements", "body", m.Endorsements); err != nil {
		return err
	}

	return nil
}

func (m *BakersRow) validateFees(formats strfmt.Registry) error {

	if err := validate.Required("fees", "body", m.Fees); err != nil {
		return err
	}

	return nil
}

func (m *BakersRow) validateStakingBalance(formats strfmt.Registry) error {

	if err := validate.Required("stakingBalance", "body", m.StakingBalance); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BakersRow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BakersRow) UnmarshalBinary(b []byte) error {
	var res BakersRow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
