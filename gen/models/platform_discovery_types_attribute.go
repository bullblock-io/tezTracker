// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlatformDiscoveryTypesAttribute platform discovery types attribute
// swagger:model PlatformDiscoveryTypes.Attribute
type PlatformDiscoveryTypesAttribute struct {

	// cardinality
	Cardinality int64 `json:"cardinality,omitempty"`

	// currency symbol
	CurrencySymbol string `json:"currencySymbol,omitempty"`

	// currency symbol code
	CurrencySymbolCode int64 `json:"currencySymbolCode,omitempty"`

	// data format
	DataFormat string `json:"dataFormat,omitempty"`

	// data type
	// Required: true
	// Enum: [Enum Hex Binary Date DateTime String Hash AccountAddress Int LargeInt Decimal Currency Boolean]
	DataType *string `json:"dataType"`

	// description
	Description string `json:"description,omitempty"`

	// display name
	// Required: true
	DisplayName *string `json:"displayName"`

	// display order
	DisplayOrder int64 `json:"displayOrder,omitempty"`

	// display priority
	DisplayPriority int64 `json:"displayPriority,omitempty"`

	// entity
	// Required: true
	Entity *string `json:"entity"`

	// key type
	// Required: true
	// Enum: [NonKey UniqueKey]
	KeyType *string `json:"keyType"`

	// name
	// Required: true
	Name *string `json:"name"`

	// placeholder
	Placeholder string `json:"placeholder,omitempty"`

	// reference
	Reference map[string]string `json:"reference,omitempty"`

	// scale
	Scale int64 `json:"scale,omitempty"`

	// sufficient for query
	SufficientForQuery bool `json:"sufficientForQuery,omitempty"`

	// value map
	ValueMap map[string]string `json:"valueMap,omitempty"`
}

// Validate validates this platform discovery types attribute
func (m *PlatformDiscoveryTypesAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var platformDiscoveryTypesAttributeTypeDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enum","Hex","Binary","Date","DateTime","String","Hash","AccountAddress","Int","LargeInt","Decimal","Currency","Boolean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		platformDiscoveryTypesAttributeTypeDataTypePropEnum = append(platformDiscoveryTypesAttributeTypeDataTypePropEnum, v)
	}
}

const (

	// PlatformDiscoveryTypesAttributeDataTypeEnum captures enum value "Enum"
	PlatformDiscoveryTypesAttributeDataTypeEnum string = "Enum"

	// PlatformDiscoveryTypesAttributeDataTypeHex captures enum value "Hex"
	PlatformDiscoveryTypesAttributeDataTypeHex string = "Hex"

	// PlatformDiscoveryTypesAttributeDataTypeBinary captures enum value "Binary"
	PlatformDiscoveryTypesAttributeDataTypeBinary string = "Binary"

	// PlatformDiscoveryTypesAttributeDataTypeDate captures enum value "Date"
	PlatformDiscoveryTypesAttributeDataTypeDate string = "Date"

	// PlatformDiscoveryTypesAttributeDataTypeDateTime captures enum value "DateTime"
	PlatformDiscoveryTypesAttributeDataTypeDateTime string = "DateTime"

	// PlatformDiscoveryTypesAttributeDataTypeString captures enum value "String"
	PlatformDiscoveryTypesAttributeDataTypeString string = "String"

	// PlatformDiscoveryTypesAttributeDataTypeHash captures enum value "Hash"
	PlatformDiscoveryTypesAttributeDataTypeHash string = "Hash"

	// PlatformDiscoveryTypesAttributeDataTypeAccountAddress captures enum value "AccountAddress"
	PlatformDiscoveryTypesAttributeDataTypeAccountAddress string = "AccountAddress"

	// PlatformDiscoveryTypesAttributeDataTypeInt captures enum value "Int"
	PlatformDiscoveryTypesAttributeDataTypeInt string = "Int"

	// PlatformDiscoveryTypesAttributeDataTypeLargeInt captures enum value "LargeInt"
	PlatformDiscoveryTypesAttributeDataTypeLargeInt string = "LargeInt"

	// PlatformDiscoveryTypesAttributeDataTypeDecimal captures enum value "Decimal"
	PlatformDiscoveryTypesAttributeDataTypeDecimal string = "Decimal"

	// PlatformDiscoveryTypesAttributeDataTypeCurrency captures enum value "Currency"
	PlatformDiscoveryTypesAttributeDataTypeCurrency string = "Currency"

	// PlatformDiscoveryTypesAttributeDataTypeBoolean captures enum value "Boolean"
	PlatformDiscoveryTypesAttributeDataTypeBoolean string = "Boolean"
)

// prop value enum
func (m *PlatformDiscoveryTypesAttribute) validateDataTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, platformDiscoveryTypesAttributeTypeDataTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PlatformDiscoveryTypesAttribute) validateDataType(formats strfmt.Registry) error {

	if err := validate.Required("dataType", "body", m.DataType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDataTypeEnum("dataType", "body", *m.DataType); err != nil {
		return err
	}

	return nil
}

func (m *PlatformDiscoveryTypesAttribute) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *PlatformDiscoveryTypesAttribute) validateEntity(formats strfmt.Registry) error {

	if err := validate.Required("entity", "body", m.Entity); err != nil {
		return err
	}

	return nil
}

var platformDiscoveryTypesAttributeTypeKeyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NonKey","UniqueKey"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		platformDiscoveryTypesAttributeTypeKeyTypePropEnum = append(platformDiscoveryTypesAttributeTypeKeyTypePropEnum, v)
	}
}

const (

	// PlatformDiscoveryTypesAttributeKeyTypeNonKey captures enum value "NonKey"
	PlatformDiscoveryTypesAttributeKeyTypeNonKey string = "NonKey"

	// PlatformDiscoveryTypesAttributeKeyTypeUniqueKey captures enum value "UniqueKey"
	PlatformDiscoveryTypesAttributeKeyTypeUniqueKey string = "UniqueKey"
)

// prop value enum
func (m *PlatformDiscoveryTypesAttribute) validateKeyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, platformDiscoveryTypesAttributeTypeKeyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PlatformDiscoveryTypesAttribute) validateKeyType(formats strfmt.Registry) error {

	if err := validate.Required("keyType", "body", m.KeyType); err != nil {
		return err
	}

	// value enum
	if err := m.validateKeyTypeEnum("keyType", "body", *m.KeyType); err != nil {
		return err
	}

	return nil
}

func (m *PlatformDiscoveryTypesAttribute) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlatformDiscoveryTypesAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlatformDiscoveryTypesAttribute) UnmarshalBinary(b []byte) error {
	var res PlatformDiscoveryTypesAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
