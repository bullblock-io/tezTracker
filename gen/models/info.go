// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Info info
// swagger:model Info
type Info struct {

	// Expected annual return in percents.
	AnnualYield float64 `json:"annual_yield,omitempty"`

	// price
	// Required: true
	Price *float64 `json:"price"`

	// price 24h change
	// Required: true
	Price24hChange *float64 `json:"price_24h_change"`

	// Staking ratio in percents (0-100).
	// Maximum: 100
	// Minimum: 0
	StakingRatio *float64 `json:"staking_ratio,omitempty"`
}

// Validate validates this info
func (m *Info) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice24hChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStakingRatio(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Info) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *Info) validatePrice24hChange(formats strfmt.Registry) error {

	if err := validate.Required("price_24h_change", "body", m.Price24hChange); err != nil {
		return err
	}

	return nil
}

func (m *Info) validateStakingRatio(formats strfmt.Registry) error {

	if swag.IsZero(m.StakingRatio) { // not required
		return nil
	}

	if err := validate.Minimum("staking_ratio", "body", float64(*m.StakingRatio), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("staking_ratio", "body", float64(*m.StakingRatio), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Info) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Info) UnmarshalBinary(b []byte) error {
	var res Info
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
