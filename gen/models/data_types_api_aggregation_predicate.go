// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataTypesAPIAggregationPredicate data types Api aggregation predicate
// swagger:model DataTypes.ApiAggregationPredicate
type DataTypesAPIAggregationPredicate struct {

	// inverse
	Inverse bool `json:"inverse,omitempty"`

	// operation
	// Required: true
	// Enum: [in between like lt gt eq startsWith endsWith before after isnull]
	Operation *string `json:"operation"`

	// precision
	Precision int64 `json:"precision,omitempty"`

	// set
	Set []string `json:"set"`
}

// Validate validates this data types Api aggregation predicate
func (m *DataTypesAPIAggregationPredicate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataTypesApiAggregationPredicateTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["in","between","like","lt","gt","eq","startsWith","endsWith","before","after","isnull"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataTypesApiAggregationPredicateTypeOperationPropEnum = append(dataTypesApiAggregationPredicateTypeOperationPropEnum, v)
	}
}

const (

	// DataTypesAPIAggregationPredicateOperationIn captures enum value "in"
	DataTypesAPIAggregationPredicateOperationIn string = "in"

	// DataTypesAPIAggregationPredicateOperationBetween captures enum value "between"
	DataTypesAPIAggregationPredicateOperationBetween string = "between"

	// DataTypesAPIAggregationPredicateOperationLike captures enum value "like"
	DataTypesAPIAggregationPredicateOperationLike string = "like"

	// DataTypesAPIAggregationPredicateOperationLt captures enum value "lt"
	DataTypesAPIAggregationPredicateOperationLt string = "lt"

	// DataTypesAPIAggregationPredicateOperationGt captures enum value "gt"
	DataTypesAPIAggregationPredicateOperationGt string = "gt"

	// DataTypesAPIAggregationPredicateOperationEq captures enum value "eq"
	DataTypesAPIAggregationPredicateOperationEq string = "eq"

	// DataTypesAPIAggregationPredicateOperationStartsWith captures enum value "startsWith"
	DataTypesAPIAggregationPredicateOperationStartsWith string = "startsWith"

	// DataTypesAPIAggregationPredicateOperationEndsWith captures enum value "endsWith"
	DataTypesAPIAggregationPredicateOperationEndsWith string = "endsWith"

	// DataTypesAPIAggregationPredicateOperationBefore captures enum value "before"
	DataTypesAPIAggregationPredicateOperationBefore string = "before"

	// DataTypesAPIAggregationPredicateOperationAfter captures enum value "after"
	DataTypesAPIAggregationPredicateOperationAfter string = "after"

	// DataTypesAPIAggregationPredicateOperationIsnull captures enum value "isnull"
	DataTypesAPIAggregationPredicateOperationIsnull string = "isnull"
)

// prop value enum
func (m *DataTypesAPIAggregationPredicate) validateOperationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataTypesApiAggregationPredicateTypeOperationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataTypesAPIAggregationPredicate) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", *m.Operation); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTypesAPIAggregationPredicate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTypesAPIAggregationPredicate) UnmarshalBinary(b []byte) error {
	var res DataTypesAPIAggregationPredicate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
