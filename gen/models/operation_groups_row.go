// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperationGroupsRow operation groups row
// swagger:model OperationGroupsRow
type OperationGroupsRow struct {

	// block Id
	// Required: true
	BlockID *string `json:"blockId"`

	// branch
	// Required: true
	Branch *string `json:"branch"`

	// chain Id
	ChainID string `json:"chainId,omitempty"`

	// hash
	// Required: true
	Hash *string `json:"hash"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// signature
	Signature string `json:"signature,omitempty"`
}

// Validate validates this operation groups row
func (m *OperationGroupsRow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationGroupsRow) validateBlockID(formats strfmt.Registry) error {

	if err := validate.Required("blockId", "body", m.BlockID); err != nil {
		return err
	}

	return nil
}

func (m *OperationGroupsRow) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("branch", "body", m.Branch); err != nil {
		return err
	}

	return nil
}

func (m *OperationGroupsRow) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("hash", "body", m.Hash); err != nil {
		return err
	}

	return nil
}

func (m *OperationGroupsRow) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationGroupsRow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationGroupsRow) UnmarshalBinary(b []byte) error {
	var res OperationGroupsRow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
