// Code generated by MockGen. DO NOT EDIT.
// Source: ./operation.go

// Package mock_operation is a generated GoMock package.
package mock_operation

import (
	models "github.com/bullblock-io/tezTracker/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockRepo) Find(filter models.Operation) (bool, models.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", filter)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(models.Operation)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find
func (mr *MockRepoMockRecorder) Find(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepo)(nil).Find), filter)
}

// List mocks base method
func (m *MockRepo) List(ids, kinds, inBlocks, accountIDs []string, limit, offset uint, since int64) ([]models.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ids, kinds, inBlocks, accountIDs, limit, offset, since)
	ret0, _ := ret[0].([]models.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRepoMockRecorder) List(ids, kinds, inBlocks, accountIDs, limit, offset, since interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepo)(nil).List), ids, kinds, inBlocks, accountIDs, limit, offset, since)
}

// Count mocks base method
func (m *MockRepo) Count(ids, kinds, inBlocks, accountIDs []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ids, kinds, inBlocks, accountIDs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockRepoMockRecorder) Count(ids, kinds, inBlocks, accountIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepo)(nil).Count), ids, kinds, inBlocks, accountIDs)
}

// EndorsementsFor mocks base method
func (m *MockRepo) EndorsementsFor(blockLevel int64) ([]models.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndorsementsFor", blockLevel)
	ret0, _ := ret[0].([]models.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndorsementsFor indicates an expected call of EndorsementsFor
func (mr *MockRepoMockRecorder) EndorsementsFor(blockLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndorsementsFor", reflect.TypeOf((*MockRepo)(nil).EndorsementsFor), blockLevel)
}
