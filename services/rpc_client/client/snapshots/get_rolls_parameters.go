// Code generated by go-swagger; DO NOT EDIT.

package snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRollsParams creates a new GetRollsParams object
// with the default values initialized.
func NewGetRollsParams() *GetRollsParams {
	var ()
	return &GetRollsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRollsParamsWithTimeout creates a new GetRollsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRollsParamsWithTimeout(timeout time.Duration) *GetRollsParams {
	var ()
	return &GetRollsParams{

		timeout: timeout,
	}
}

// NewGetRollsParamsWithContext creates a new GetRollsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRollsParamsWithContext(ctx context.Context) *GetRollsParams {
	var ()
	return &GetRollsParams{

		Context: ctx,
	}
}

// NewGetRollsParamsWithHTTPClient creates a new GetRollsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRollsParamsWithHTTPClient(client *http.Client) *GetRollsParams {
	var ()
	return &GetRollsParams{
		HTTPClient: client,
	}
}

/*GetRollsParams contains all the parameters to send to the API endpoint
for the get rolls operation typically these are written to a http.Request
*/
type GetRollsParams struct {

	/*Block*/
	Block string
	/*Cycle*/
	Cycle int64
	/*Network*/
	Network string
	/*Snap*/
	Snap int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get rolls params
func (o *GetRollsParams) WithTimeout(timeout time.Duration) *GetRollsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get rolls params
func (o *GetRollsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get rolls params
func (o *GetRollsParams) WithContext(ctx context.Context) *GetRollsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get rolls params
func (o *GetRollsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get rolls params
func (o *GetRollsParams) WithHTTPClient(client *http.Client) *GetRollsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get rolls params
func (o *GetRollsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBlock adds the block to the get rolls params
func (o *GetRollsParams) WithBlock(block string) *GetRollsParams {
	o.SetBlock(block)
	return o
}

// SetBlock adds the block to the get rolls params
func (o *GetRollsParams) SetBlock(block string) {
	o.Block = block
}

// WithCycle adds the cycle to the get rolls params
func (o *GetRollsParams) WithCycle(cycle int64) *GetRollsParams {
	o.SetCycle(cycle)
	return o
}

// SetCycle adds the cycle to the get rolls params
func (o *GetRollsParams) SetCycle(cycle int64) {
	o.Cycle = cycle
}

// WithNetwork adds the network to the get rolls params
func (o *GetRollsParams) WithNetwork(network string) *GetRollsParams {
	o.SetNetwork(network)
	return o
}

// SetNetwork adds the network to the get rolls params
func (o *GetRollsParams) SetNetwork(network string) {
	o.Network = network
}

// WithSnap adds the snap to the get rolls params
func (o *GetRollsParams) WithSnap(snap int64) *GetRollsParams {
	o.SetSnap(snap)
	return o
}

// SetSnap adds the snap to the get rolls params
func (o *GetRollsParams) SetSnap(snap int64) {
	o.Snap = snap
}

// WriteToRequest writes these params to a swagger request
func (o *GetRollsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param block
	if err := r.SetPathParam("block", o.Block); err != nil {
		return err
	}

	// path param cycle
	if err := r.SetPathParam("cycle", swag.FormatInt64(o.Cycle)); err != nil {
		return err
	}

	// path param network
	if err := r.SetPathParam("network", o.Network); err != nil {
		return err
	}

	// path param snap
	if err := r.SetPathParam("snap", swag.FormatInt64(o.Snap)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
